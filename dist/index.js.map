{"version":3,"file":"index.js","sources":["../src/rest-client-provider/RestClientContext.ts","../src/rest-client-provider/HttpClient.ts","../src/rest-client-provider/RestClientProvider.tsx","../src/hooks/use-api-context/useApiContext.ts","../src/hooks/use-get-lazy/useGetLazy.ts","../src/hooks/use-get/use-get.ts","../src/hooks/use-prevprops/usePrevProps.ts","../src/hooks/use-post/usePost.ts","../src/hooks/use-delete/useDelete.ts","../src/hooks/use-put/usePut.ts","../src/hooks/use-patch/usePatch.ts"],"sourcesContent":["import React from 'react'\nimport { RestClientContextType } from '../types/RestClientProvider.types'\n\nexport const RestClientContext = React.createContext<RestClientContextType>({})\nexport const RestClientContextProvider = RestClientContext.Provider\nexport const RestclientContextConsumer = RestClientContext.Consumer\n","import {\n    HeaderTypes,\n    HttpClientConfig,\n    EndpointsConfigType,\n    ResolvePathOptions,\n    DoRequestConfigurationType\n} from '../types/HttpClient.types'\nimport axios from 'axios'\nimport { DoRequestResponseType } from '../types/HttpClient.types'\nimport _ from 'lodash'\n\n/**\n * This class contains the logic to interact with http requests\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n */\nclass HttpClient {\n    /**\n     * Http headers which you can find here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\n     */\n    private headers: HeaderTypes = {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    }\n    /**\n     * Contains the server where the requests will be send\n     */\n    private readonly server: string | undefined\n\n    private readonly endpoints: EndpointsConfigType\n\n    constructor(config: HttpClientConfig) {\n        const { server, endpoints } = config\n        this.server = server\n        this.endpoints = endpoints\n    }\n\n    /**\n     * Current headers configured for the client\n     * @returns HeaderTypes\n     */\n    public getHeaders() {\n        return this.headers\n    }\n\n    /**\n     * Current configured server for the client\n     * @returns string\n     */\n    public getServer() {\n        return this.server\n    }\n    /**\n     * Current configured endpoints for the client\n     * @returns EndpointsConfigType\n     */\n    public getEndpoints() {\n        return this.endpoints\n    }\n\n    private findEndpoint(path: string) {\n        const parts = path.split('.')\n        const url =\n            parts.length > 1\n                ? parts\n                      .reduce((result: any, pathPortion): string | {} => {\n                          if (result[pathPortion]) {\n                              result = result[pathPortion]\n                          } else {\n                              // url must be reseted if the part does not exists\n                              result = '/invalid-path'\n                          }\n                          return result\n                      }, this.endpoints)\n                      .toString()\n                : `/${path}`\n        return url\n    }\n\n    private addUrlParams(url: string, options?: ResolvePathOptions) {\n        const { urlParams = {} } = options || {}\n        const params: string[] = []\n        Object.keys(urlParams).forEach((currentKey: string) => {\n            const value = encodeURIComponent(urlParams[currentKey])\n            params.push(`${currentKey}=${value}`)\n        })\n        if (params.length > 0) {\n            url = `${url}?${params.join('&')}`\n        }\n        return url\n    }\n\n    /**\n     * Loop for every key in the replacement object and replace the found keys\n     * for any assigned value\n     * @param url string\n     * @param options ResolvePathOptions\n     * @returns string\n     */\n    private executingReplacements(url: string, options?: ResolvePathOptions) {\n        const { replacements = {}, replacementConfig = {} } = options || {}\n        const { startToken = '{', endToken = '}' } = replacementConfig\n        Object.keys(replacements).map((currentKey) => {\n            url = url.replace(\n                new RegExp(`${startToken}${currentKey}${endToken}`),\n                replacements[currentKey].toString()\n            )\n        })\n        return url\n    }\n\n    private clearMethod(url: string) {\n        /**\n         * If the url has type definition we must clean it\n         */\n        if (url.includes('<') && url.includes('>')) {\n            url = url.replace(new RegExp(`<.*>`, 'g'), '')\n        }\n        return url\n    }\n\n    private getMethod(url: string) {\n        let type = ''\n        const matches = url.match(new RegExp('(<[a-zA-Z]+>)', 'g'))\n        const [match] = matches || []\n        type = match?.replace(new RegExp('<|>', 'g'), '')\n        return type\n    }\n\n    /**\n     * Converts a dot notation string into a valid url to make a request\n     * @param path string\n     * @param options ResolvePathOptions\n     * @returns [string, string]\n     */\n    public resolvePath(path: string, options?: ResolvePathOptions) {\n        let url = this.findEndpoint(path)\n        const urlDefinedMethod = this.getMethod(url)\n        url = this.clearMethod(url)\n        url = this.executingReplacements(url, options)\n        url = this.addUrlParams(url, options)\n\n        return [`${this.server}${url}`, urlDefinedMethod]\n    }\n\n    public async doRequest(\n        path: string,\n        config?: DoRequestConfigurationType\n    ): Promise<DoRequestResponseType> {\n        const [url, methodType] = this.resolvePath(path, config)\n        const { method = 'get' } = config || {}\n        if (!_.isEmpty(methodType) && methodType !== method) {\n            throw new Error('Invalid method for endpoint')\n        }\n\n        try {\n            let payload = config?.payload\n            if (method === 'post') {\n                const { data, status } = await axios.post(url, payload)\n                return {\n                    status,\n                    data\n                }\n            } else if (method === 'put') {\n                const response = await axios.put(url, payload)\n                const { data, status } = response\n                return {\n                    status,\n                    data\n                }\n            } else if (method === 'patch') {\n                const { data, status } = await axios.patch(url, payload)\n                return {\n                    status,\n                    data\n                }\n            } else if (method === 'delete') {\n                const { data, status } = await axios.delete(url)\n                return {\n                    status,\n                    data\n                }\n            } else {\n                const { data, status } = await axios.get(url)\n                return {\n                    status,\n                    data\n                }\n            }\n        } catch (error) {\n            throw {\n                errorMessage: error.message,\n                status: error.status,\n                data: error.data\n            }\n        }\n    }\n}\n\nexport default HttpClient\n","import React from 'react'\nimport { RestClientContextProvider } from './RestClientContext'\nimport { HttpClientConfig } from '../types/HttpClient.types'\nimport HttpClient from './HttpClient'\n\ntype ApiMockType = {\n    ok?: any\n    fail?: any\n    delay?: number\n}\n\ninterface RestClientProviderProps {\n    children: React.ReactNode\n    config: HttpClientConfig\n    mocks?: {\n        [k: string]: ApiMockType\n    }\n}\nconst RestClientProvider: React.FC<RestClientProviderProps> = ({ children, config }) => {\n    const httpClient = React.useRef(new HttpClient(config))\n\n    return (\n        <RestClientContextProvider\n            value={{\n                client: httpClient.current\n            }}\n        >\n            {children}\n        </RestClientContextProvider>\n    )\n}\n\nexport default RestClientProvider\n","import React from 'react'\nimport { RestClientContext } from '../../rest-client-provider/RestClientContext'\n\nconst useApiContext = () => {\n    const { client } = React.useContext(RestClientContext)\n    return {\n        client\n    }\n}\n\nexport default useApiContext\n","import React from 'react'\nimport useApiContext from '../use-api-context/useApiContext'\nimport { RequestConfigType, RequestConfigOverrideType } from '../../types/HttpClient.types'\n\ntype UseGetLazyReturnType = [(overrideOptions?: RequestConfigOverrideType) => Promise<any>, boolean]\n\nconst useGetLazy = <UrlType extends string>(\n    url: UrlType,\n    options?: RequestConfigType\n): UseGetLazyReturnType => {\n    const { onCompleted, replacements, urlParams } = options || {}\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const { client } = useApiContext()\n\n    const sendRequest = React.useCallback(async (overrideOptions?: RequestConfigOverrideType) => {\n        try {\n            setLoading(true)\n            const { data } = (await client?.doRequest(url, {\n                urlParams,\n                replacements,\n                ...overrideOptions,\n                method: 'get'\n            })) as any\n            if (onCompleted) {\n                onCompleted(data)\n            }\n            setLoading(false)\n            return data\n        } catch (err) {\n            setLoading(false)\n            return {\n                error: true,\n                ...err\n            }\n        }\n    }, [])\n\n    return [sendRequest, loading]\n}\n\nexport default useGetLazy\n","import React from 'react'\nimport { RequestConfigType } from '../../types/HttpClient.types'\nimport useGetLazy from '../use-get-lazy/useGetLazy'\n\nconst useGet = <UrlType extends string, ResponseType extends any>(\n    url: UrlType,\n    options?: RequestConfigType\n) => {\n    const { defaultData } = options || {}\n    const [sendRequest, loading] = useGetLazy(url, options)\n    const [data, setData] = React.useState<ResponseType>(defaultData)\n    const [requestedOnce, setRequestedOnce] = React.useState<boolean>(false)\n    const [requesting, setRequesting] = React.useState<boolean>(false)\n\n    const fetchData = React.useCallback(\n        async (overrideOptions?: RequestConfigType) => {\n            setRequesting(true)\n            const response = await sendRequest(overrideOptions)\n            setData(response)\n            setRequestedOnce(true)\n            setRequesting(false)\n        },\n        [requesting, requestedOnce]\n    )\n\n    React.useEffect(() => {\n        if (!requesting && !requestedOnce) {\n            fetchData()\n        }\n    }, [requesting, requestedOnce])\n\n    return [\n        data,\n        loading,\n        {\n            refresh: fetchData\n        }\n    ]\n}\n\nexport default useGet\n","import { useEffect, useRef } from 'react'\n\n/**\n * Hook to store the previous value for the props passed to a component\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @param value\n * @returns\n */\nconst usePrevProps = <R extends { [key: string]: any }>(value: R): R => {\n    const valuesRef = useRef(value)\n    useEffect(() => {\n        valuesRef.current = value\n    })\n    return valuesRef.current\n}\n\nexport default usePrevProps\n","import React from 'react'\nimport useApiContext from '../use-api-context/useApiContext'\n\ntype UsePostReturnType = any\ntype OverrideOptionsType = any\n\nconst usePost = <UrlType extends string>(url: UrlType): UsePostReturnType => {\n    const [loading, setLoading] = React.useState(false)\n    const { client } = useApiContext()\n    const sendRequest = async <PayloadType = any>(\n        payload?: PayloadType,\n        overrideOptions?: OverrideOptionsType\n    ) => {\n        try {\n            setLoading(true)\n            const response = await client?.doRequest(url, {\n                payload: payload,\n                ...overrideOptions,\n                method: 'post'\n            })\n            setLoading(false)\n            const { data } = response as any\n            // ToDo: handle response for 500 errors\n            return data\n        } catch (err) {\n            return {\n                ...err\n            }\n        }\n    }\n    return [sendRequest, loading]\n}\n\nexport default usePost\n","import React from 'react'\nimport useApiContext from '../use-api-context/useApiContext'\n\ntype UseDeleteReturnType = any\ntype OverrideOptionsType = any\n\nconst useDelete = <UrlType extends string>(url: UrlType): UseDeleteReturnType => {\n    const [loading, setLoading] = React.useState(false)\n    const { client } = useApiContext()\n    const sendRequest = async (overrideOptions?: OverrideOptionsType) => {\n        try {\n            setLoading(true)\n            const response = await client?.doRequest(url, {\n                ...overrideOptions,\n                method: 'delete'\n            })\n            setLoading(false)\n            const { data } = response as any\n            // ToDo: handle response for 500 errors\n            return data\n        } catch (err) {\n            return {\n                ...err\n            }\n        }\n    }\n    return [sendRequest, loading]\n}\n\nexport default useDelete\n","import React from 'react'\nimport useApiContext from '../use-api-context/useApiContext'\n\ntype UsePutReturnType = any\ntype OverrideOptionsType = any\n\nconst usePut = <UrlType extends string>(url: UrlType): UsePutReturnType => {\n    const [loading, setLoading] = React.useState(false)\n    const { client } = useApiContext()\n    const sendRequest = async <PayloadType = any>(\n        payload?: PayloadType,\n        overrideOptions?: OverrideOptionsType\n    ) => {\n        try {\n            setLoading(true)\n            const response = await client?.doRequest(url, {\n                payload: payload,\n                ...overrideOptions,\n                method: 'put'\n            })\n            setLoading(false)\n            const { data } = response as any\n            // ToDo: handle response for 500 errors\n            return data\n        } catch (err) {\n            return {\n                ...err\n            }\n        }\n    }\n    return [sendRequest, loading]\n}\n\nexport default usePut\n","import React from 'react'\nimport useApiContext from '../use-api-context/useApiContext'\n\ntype UsePatchReturnType = any\ntype OverrideOptionsType = any\n\nconst usePatch = <UrlType extends string>(url: UrlType): UsePatchReturnType => {\n    const [loading, setLoading] = React.useState(false)\n    const { client } = useApiContext()\n    const sendRequest = async <PayloadType = any>(\n        payload?: PayloadType,\n        overrideOptions?: OverrideOptionsType\n    ) => {\n        try {\n            setLoading(true)\n            const response = await client?.doRequest(url, {\n                payload: payload,\n                ...overrideOptions,\n                method: 'patch'\n            })\n            setLoading(false)\n            const { data } = response as any\n            // ToDo: handle response for 500 errors\n            return data\n        } catch (err) {\n            return {\n                ...err\n            }\n        }\n    }\n    return [sendRequest, loading]\n}\n\nexport default usePatch\n"],"names":["React","_","axios","useRef","useEffect"],"mappings":"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"}